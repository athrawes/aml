let Effect = use "System.Control.Effect"

type Maybe[^T] =
    | Some[^T]
    | None

module for Maybe extends Effect =
    /** @inheritdoc */
    let from : ^T -> Maybe[^T] = Maybe.Some

    /** @inheritdoc */
    let then
        : (^A -> Maybe[^B]) -> Maybe[^A] -> Maybe[^B]
        = callback -> maybe ->
            match maybe
            | Some { value } => callback value
            | _ => None
