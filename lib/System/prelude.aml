add: Number -> Number -> Number
(+) = add

subtract: Number -> Number -> Number
(-) = subtract

multiply: Number -> Number -> Number
(*) = multiply

divide: Number -> Number -> Maybe<Number>
(/) = divide

pipe: A -> (A -> B) -> B
  = argument -> callback -> callback argument

(|>) = pipe
(<|) = flip (|>)

compose: (A -> B) -> (B -> C) -> A -> C
  = callback-a-b -> callback-b-c -> a ->
    a |> callback-a-b |> callback-b-c

(>>) = compose
(<<) = flip (>>)

flip: (A -> B -> C) -> (B -> A -> C)
  = callback -> (b -> a -> callback a b)

(and): Boolean -> Boolean -> Boolean
  = a -> b -> a b a

(or): Boolean -> Boolean -> Boolean
  = a -> b -> a a b

(xor): Boolean -> Boolean -> Boolean
  = is >> not

not: Boolean -> Boolean
  = condition -> flip condition

bitshift-left: A -> Integer -> A

(<<<) = bitshift-left

bitshift-right: A -> Integer -> A

(>>>) = bitshift-right

(is): A -> A -> Boolean

id: A -> A = a -> a
