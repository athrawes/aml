add: Number -> Number -> Number
(+) = add

subtract: Number -> Number -> Number
(-) = subtract

multiply: Number -> Number -> Number
(*) = multiply

divide: Number -> Number -> Maybe<Number>
(/) = divide

pipe: A -> (A -> B) -> B
  = argument -> function -> function argument

(|>) = pipe
(<|) = swap-args (|>)

compose: (A -> B) -> (B -> C) -> A -> C
  = callback-a -> callback-b -> argument ->
    argument |> callback-a |> callback-b

(>>) = compose
(<<) = swap-args (>>)

swap-args: (A -> B -> C) -> (B -> A -> C)
  = callback -> a -> b -> callback b a

(and): Boolean -> Boolean -> Boolean

(or): Boolean -> Boolean -> Boolean

(xor): Boolean -> Boolean -> Boolean

not: Boolean -> Boolean

bitshift-left: A -> Integer -> A

(<<<) = bitshift-left

bitshift-right: A -> Integer -> A

(>>>) = bitshift-right

(is): A -> A -> Boolean

id: A -> A = a -> a
