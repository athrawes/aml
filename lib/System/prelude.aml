add: Number -> Number -> Number
(+) = add

subtract: Number -> Number -> Number
(-) = subtract

multiply: Number -> Number -> Number
(*) = multiply

divide: Number -> Number -> Maybe Number
(/) = divide

pipe: 'a -> ('a -> 'b) -> 'b
  = argument callback -> callback argument

(|>) = pipe
(<|) = flip (|>)

compose: ('a -> 'b) -> ('b -> 'c) -> 'a -> 'c
  = callback-a-b callback-b-c a ->
    a |> callback-a-b |> callback-b-c

(>>) = compose
(<<) = flip (>>)

flip: ('a -> 'b -> 'c) -> ('b -> 'a -> 'c)
  = callback b a -> callback a b

(and): Boolean -> Boolean -> Boolean
  = a b -> a b a

(or): Boolean -> Boolean -> Boolean
  = a b -> a a b

(xor): Boolean -> Boolean -> Boolean
  = is >> not

not: Boolean -> Boolean
  = condition -> flip condition

bitshift-left: 'a -> Integer -> 'a

(<<<) = bitshift-left

bitshift-right: 'a -> Integer -> 'a

(>>>) = bitshift-right

(is): 'a -> 'a -> Boolean

id: 'a -> 'a = a -> a
