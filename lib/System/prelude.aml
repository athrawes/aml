add: Number -> Number -> Number
+ : infix = add

subtract: Number -> Number -> Number
- : infix = subtract

multiply: Number -> Number -> Number
* : infix = multiply

divide: Number -> Number -> Maybe<Number>
/ : infix = divide

pow: Number -> Number -> Number
** : infix = pow

pipe: A -> (A -> B) -> B
  = argument -> function -> function argument

|> : infix = pipe
<| : infix = swap-args pipe

compose: (A -> B) -> (B -> C) -> A -> C
  = callback-a -> callback-b -> argument ->
    argument |> callback-a |> callback-b

>> : infix = compose
<< : infix = swap-args compose

swap-args: (A -> B -> C) -> (B -> A -> C)
  = callback -> a -> b -> callback b a

and: infix Boolean -> Boolean -> Boolean

or: infix Boolean -> Boolean -> Boolean

xor: infix Boolean -> Boolean -> Boolean

not: Boolean -> Boolean

bitshift-left: A -> Integer -> A

<<< : infix = bitshift-left

bitshift-right: A -> Integer -> A

>>> : infix = bitshift-right

is: infix A -> A -> Boolean

id: A -> A = a -> a

if: Boolean -> A -> A -> A
  = condition -> if-true -> if-false ->
    match condition
    | True => if-true
    | False => if-false
