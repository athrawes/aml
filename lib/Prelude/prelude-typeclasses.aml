type Alt<'a> extends Functor<'a>
trait Alt extends Functor
	alt ∷ Alt 'm ⇒ 'm<'a> → 'm<'a> → 'm<'a>

type Alternative<'a> extends Applicative<'a>, Plus<'a>
trait Alternative extends Applicative Plus

type Applicative<'a> extends Apply<'a>
trait Applicative extends Apply
	from ∷ Applicative 'm ⇒ 'a → 'm<'a>

	(<$) ∷ Applicative 'm ⇒ 'm<'a> → 'b → 'm<'b>
	(<$) ≔ ma → b → lift_a1 (const b) ma

	($>) ∷ Applicative 'm ⇒ 'a → 'm<'b> → 'm<'a>
	($>) ≔ ⇋ <$

	lift_a0 ∷ Applicative 'm ⇒ 'a → 'm<'a>
	lift_a0 ≔ from

	lift_a1 ∷ Applicative 'm ⇒ ('a → 'b) → 'm<'a> → 'm<'b>
	lift_a1 ≔ callback → ma → (from callback) <*> ma

	lift_a2 ∷ Applicative 'm ⇒ ('a → 'b → 'c) → 'm<'a> → 'm<'b> → 'm<'c>
	lift_a2 ≔ callback → ma → mb → (from callback) <*> ma <*> mb

type Apply<'a> extends Functor<'a>
trait Apply extends Functor
	(<*>) ∷ Apply 'm ⇒ 'm<('a → 'b)> → 'm<'a> → 'm<'b>

	(<**>) ≔ ⇋ (<*>)

type Bifunctor<'a, 'b> extends Functor<'b>
trait Bifunctor extends Functor
	bimap ∷ Bifunctor 'm ⇒ 'm<'a, 'c> → ('a → 'b) → ('c → 'd) → 'm<'b, 'd>

type Category<'a> extends Semigroupoid<'a, 'a>
trait Category extends Semigroupoid
	# The identity object for a given category.
	#
	# This object should behave as one would expect for an identity object.
	# As an example, given a category of multiplication, the identity object would
	# be `1`, since `1 * x` is always `x`.
	#
	# This identity should behave the same whether it's on the left or right side
	# of a composition.
	#
	# Given an object `a` which is a member of a category `'m`, the following
	# should hold:
	#
	# - `ι ∘> a` should be the same as `a`
	# - `a ∘> ι` should be the same as `a`
	ι ∷ Category 'm ⇒ 'm<_>

type Chain<'a> extends Apply<'a>
trait Chain extends Apply
	# Allows chaining functions which return instances of the current type.
	#
	# ```aml
	# (Maybe.from 42)
	# >>= (value → value / 2) # Maybe<Float> (21.0)
	# >>= (value → value / 5) # Maybe<Float> (4.2)
	# ```
	(>>=) ∷ Chain 'm ⇒ 'm<'a> → ('a → 'm<'b>) → 'm<'b>

	# An infix alias for `>>=`, but with the arguments reversed.
	#
	# @include >>=
	#
	# ```aml
	# (value → value / 2) =<< (Maybe.from 42) # Maybe<Float> (21)
	# ```
	(=<<) ≔ ⇋ (>>=)

	# Composes two functions by Kleisli composition.
	(>=>) ∷ ('a → 'm<'b>) → ('b → 'm<'c>) → ('a → 'm<'c>)
	(>=>) ≔ a_to_mb → b_to_mc → a_to_mb ∘> ((⇋ >>=) b_to_mc)

	# An infix alias for `>=>`, but with the arguments reversed.
	# @include >=>
	(<=<) ≔ ⇋ (>=>)

	flatten ∷ Chain 'm ⇒ 'm<'m<'a>> → 'm<'a>
	flatten ≔ mma → mma >>= ɩ

type ChainRec<'a> extends Chain<'a>
trait ChainRec extends Chain
	# the same type as the next function in the sequence. The first function in
	# Chains together a sequence of functions, each of which returns a value of
	# the sequence is passed the `next` and `done` callbacks, which it can use to
	# continue the chain or terminate it, respectively. The `next` callback takes
	# the next function in the sequence as its first argument, and the `done`
	# callback takes the final value of the chain as its first argument.
	#
	# functions that each return a value of the same type as the next function in
	# The `chain_rec` function is useful for chaining together a sequence of
	# the sequence. The `chain_rec` function is similar to the `chain` function,
	# except that it allows the chain to be terminated early by calling the `done`
	# callback.
	#
	# For example, the following code uses `chain_rec` to implement a function
	# that returns the first even number in a sequence, or `None` if no even
	# number is found:
	#
	# ```aml
	# ```
	chain_rec ∷ ChainRec 'm ⇒ (('a → 'c) → ('b → 'c) → 'a → 'm<'c>) → 'a → 'm<'b>

type Contramap<'a>
trait Contramap
	contramap ∷ Contravariant 'm ⇒ 'm<'a> → ('b → 'a) → 'm<'b>

type Comonad<'a> extends Extend<'a>
trait Comonad extends Extend
	extract ∷ Comonad 'm ⇒ 'm<'a> → _ → 'a

type Extend<'a> extends Functor<'a>
trait Extend extends Functor
	extend ∷ Extend 'm ⇒ 'm<'a> → ('m<'a> → 'b) → 'm<'b>

type Filterable<'a>
trait Filterable
	filter ∷ Filterable 'm ⇒ 'm<'a> → ('a → 𝔹) → 'm<'a>

type Foldable<'a>
trait Foldable
	reduce ∷ Foldable 'm ⇒ 'm<'a> → ('b → 'a → 'b) → 'b → 'b

type Functor<'a>
trait Functor
	(<$>) ∷ Functor 'm ⇒ 'm<'a> → ('a → 'b) → 'm<'b>

type Group<'a> extends Monoid<'a>
trait Group extends Monoid
	invert ∷ Group 'm ⇒ 'm<'a> → 'm<'a>

type Monad<'a> extends Applicative<'a>, Chain<'a>
trait Monad extends Applicative Chain

type Monoid<'a> extends Semigroup<'a>
trait Monoid extends Semigroup
	# The empty value for a monoid.
	∅ ∷ Monoid 'm ⇒ 'm<'a>

type Ordered extends Setoid
trait Ordered extends Setoid
	# Less than or equal to. Returns true if the first argument is less than or
	# equal to the second argument.
	(≤) ∷ Ordered 'a ⇒ 'a → 'a → 𝔹

	# Strictly less than. Returns true if the first argument is strictly less than
	# the second argument.
	(<) ∷ Ordered 'a ⇒ 'a → 'a → 𝔹
	(<) ≔ a → b → ¬ (a = b) ∧ (a ≤ b)

	# Greater than or equal to. Returns true if the first argument is greater than
	# or equal to the second argument.
	(≥) ∷ Ordered 'a ⇒ 'a → 'a → 𝔹
	(≥) ≔ a → b → (a = b) ∨ (¬ (a ≤ b))

	# Strict greater than. Returns true if the first argument is strictly greater
	# than the second argument.
	(>) ∷ Ordered 'a ⇒ 'a → 'a → 𝔹
	(>) ≔ ¬ ∘∘> ≤

type Plus<'a> extends Alt<'a>
trait Plus extends Alt
	𝟘 ∷ Plus 'm ⇒ 'm<_>
	(+) ∷ Plus 'm ⇒ 'm<'a> → 'm<'a> → 'm<'a>

type Profunctor<'a, 'b> extends Functor<'b>
trait Profunctor extends Functor
	promap ∷ Profunctor 'm ⇒ 'm<'b, 'c> → ('a → 'b) → ('c → 'd) → 'm<'a, 'd>

type Semigroup<'a>
trait Semigroup
	# Combines two values by appending them together.
	(++) ∷ Semigroup 'm ⇒ 'm<'a> → 'm<'a> → 'm<'a>

type Semigroupoid<'a, 'b>
trait Semigroupoid
	# A composition function which takes two objects of the same type and returns
	# a new object which represents 'gluing' the two objects together.
	#
	# Objects implementing `Semigroupoid` should have a reasonable implementation
	# of `compose` which behaves nicely with respect to associativity. So, given
	# values `a`, `b`, and `c` of the same type:
	#
	# - `a ∘> (b ∘> c)` should be the same as `(a ∘> b) ∘> c`
	(∘>) ∷ Semigroupoid 'm ⇒ 'm<'a, 'b> → 'm<'b, 'c> → 'm<'a, 'c>
	(<∘) ≔ ⇋ (∘>)

type Setoid
trait Setoid
	# An equality function for comparing two values of the same type. Equality
	# should behave nicely here, so that `=` is reflexive, symmetric, and
	# transitive. So, given values `a`, `b`, and `c` of the same type:
	#
	# - `a = a` should be true
	# - `a = b` should be the same as `b = a`
	# - if `a = b` and `b = c` are both true, then `a = c` should also be true
	# - if one of `a = b` or `b = c` are false, then `a = c` should also be false
	# - if both are false, `a = c` may be either true or false
	(=) ∷ Setoid 'a ⇒ 'a → 'a → 𝔹

type Traversable<'a> extends Foldable<'a>, Functor<'a>
trait Traversable extends Foldable Functor
	traverse ∷ Traversable 't,  Applicative 'f
		⇒ 't<'a> → 'f<_> → ('a → 'f<'b>) → 'f<'t<'b>>
