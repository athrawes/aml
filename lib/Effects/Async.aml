type Async<`a> =
	| Resolved<`a>
	| Pending<`a> of (_ -> Resolved<`a>)

new = Resolved

(>>=) :: Async<`a> -> (`a -> Async<`b>) -> Async<`b>
(>>=) = async -> callback ->
	case async
	| Resolved (value) => callback value
	| Pending (suspended) => Pending (_ -> (suspended _) >>= callback)

await :: Async<`a> -> `a
await = async ->
	case async
	| Resolved (value) => value
	| Pending (suspended) => case (suspended _) | Resolved (value) => value
