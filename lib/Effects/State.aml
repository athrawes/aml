{ Pair, fst, snd } = use "Collections/Pair"

type State<`t, `s> extends Monad<`t>, Bifunctor<`t, `s> = Pair<`t, `s>

new : `t -> State<`t, _>
new = t -> Pair.new t _

(>>=) : State<`t, _>
	-> (`t -> State<`u, `s>)
	-> State<`u, `s>
(>>=) = state -> callback ->
	fst âˆ˜ callback

(<*>) : State<(`a -> `b), _>
	-> State<`a, `s>
	-> State<`b, `s>
(<*>) = state_fn -> state_a ->
	fn = fst state_fn
	a  = fst state_a
	s  = snd state_a

	State (fn a) s

bimap : State<`t, `state>
	-> (`t -> `u)
	-> (`state -> `updated_state)
	-> State<`u, `updated_state>
bimap = state_t_s -> callback_t -> callback_update_state ->
	t = fst state_t_s
	u = callback_t t

	s  = snd state_t_s
	s' = callback_update_state s

	State u s'
