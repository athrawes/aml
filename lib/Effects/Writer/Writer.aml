from "Collections/Sequence/List" import { List, [], ∷, reverse }

type Writer<`a> =
	& Monad<`a>
	& Comonad<`a>
	& { value: `a, logs: List<String> }

new = value -> { value, logs: [] }

(>>=) : Writer<`a> -> (`a -> Writer<`b>) -> Writer<`b>
(>>=) = writer -> callback ->
	next = callback writer.value
	{ value: next.value, logs: writer.logs ++ next.logs }

# Write a log to the Writer, without modifying the value
write : Writer<`a> -> String -> Writer<`a>
write = writer -> log ->
	{ value: writer.value, logs: log ∷ writer.logs }

# Get the logs from the Writer
logs : Writer<`a> -> List<String>
logs = writer -> reverse writer.logs

extend : Writer<`a> -> (Writer<`a> -> `b) -> Writer<`b>
extend = writer -> callback ->
	next = callback writer
	{ value: next.value, logs: writer.logs }

extract : Writer<`a> -> `a
extract = writer -> writer.value
