from "Boolean" import { 𝔹, false, ∨, ¬ }

type Sequence<`a> =
	& Foldable<`a>
	& Filterable<`a>
	& Monoid<`a>
	& Monad<`a>
	& Traversable<`a>

# Returns true if all elements in the sequence satisfy the given predicate
# function. Returns false otherwise.
#
# ```aml
# ∀ [1, 2, 3] (x -> x < 4)
# # true
#
# ∀ [1, 2, 3] (x -> x < 3)
# # false
# ```
∀ : `m<`t> -> (`t -> 𝔹) -> 𝔹
	where `m is Sequence
∀ = seq -> predicate -> ¬ (∃ seq (¬ ∘ predicate))

# Returns true if there exists any element in the sequence satisfies the given
# predicate function. Returns false otherwise.
#
# @returns {𝔹}
#   True if any element in the sequence satisfies the given predicate.
#
# ```aml
# ∃ [1, 2, 3] (x -> x == 2)
# # true
#
# ∃ [1, 2, 3] (x -> x == 4)
# # false
# ```
∃ : `m<`t> -> (`t -> 𝔹) -> 𝔹
	where `m is Sequence
∃ = seq -> predicate -> reduce seq (∨ ∘ predicate) false

# Returns true if there exists exactly one element in the sequence that
# satisfies the given predicate function. Returns false otherwise.
#
# @returns {𝔹}
#   True if exactly one element in the sequence satisfies the given
#   predicate.
#
# ```aml
# ∃! [1, 2, 3] (x -> x == 2)
# # true
#
# ∃! [1, 2, 3] (x -> x == 4)
# # false
#
# ∃! [1, 2, 3] (x -> x < 3)
# # false
# ```
∃! : `m<`t> -> (`t -> 𝔹) -> 𝔹
	where `m is Sequence
∃! = seq -> predicate ->
	case seq
	| [] => false
	| x :: xs =>
		case (predicate x)
		| true => ¬ (∃ xs predicate)
		| false => ∃! xs predicate

# Returns true if none of the elements in the sequence satisfy the given
# predicate function. Returns false otherwise.
#
# ```aml
# [1, 2, 3] ∄ (x -> x == 2)
# # false
#
# [1, 2, 3] ∄ (x -> x == 4)
# # true
# ```
(∄) = ¬ ∘∘∘ ∃

# Applies a sequence of functions to a sequence of values, returning a new
# sequence with the results.
#
# ```aml
# [(+ 1), (* 10)] <*> [1, 2]
# # [2, 3, 10, 20]
# ```
(<*>) : `m<(`a -> `b)> -> `m<`a> -> `m<`b>
	where `m is Sequence
(<*>) = fs -> xs ->
	case xs
	| [] => []
	| x :: xs' => (fs <$> (|> x)) ++ (fs <*> xs')

# @inheritdoc
(>>=) = <$> <∘∘ ↓

# Determines if the given element is in the sequence. The elements of the
# sequence must be comparable using the `==` operator.
#
# ```aml
# [1, 2, 3] ∋ 2
# # true
#
# [1, 2, 3] ∋ 4
# # false
# ```
(∋) : `m<`t> -> `t -> 𝔹
	where `m is Sequence
	where `t is Comparable
(∋) = seq -> element -> ∃ seq (== element)

# Determines if the given element is not in the sequence. The elements of the
# sequence must be comparable using the `==` operator.
#
# ```aml
# 2 ∌ [1, 2, 3]
# # false
#
# 4 ∌ [1, 2, 3]
# # true
# ```
(∌) = ¬ ∘∘∘ (∋)

# Returns a new sequence which contains all the elements of the first sequence
# which are not in the second sequence.
#
# ```aml
# [1, 2, 3] \ [2, 3, 4]
# # [1]
# ```
(\) : `m<`t> -> `m<`t> -> `m<`t>
	where `m is Sequence
(\) = a -> b -> filter a (∌ b)

# Drops the first `count` elements from the sequence and returns a new sequence
# with the remaining elements. If `count` is greater than the number of elements
# in the sequence, an empty sequence is returned.
#
# ```aml
# drop 2 [1, 2, 3]
# # [3]
# ```
drop : `m<`t> -> ℕ -> `m<`t>
	where `m is Sequence
drop = seq -> count ->
	case (count < 1)
	| true => seq
	| false => drop (count - 1) (tail seq)

# Drops elements from the sequence until the predicate function returns false.
# Returns a new sequence with the remaining elements. If the predicate function
# always returns true, an empty sequence is returned.
#
# ```aml
# drop_while [1, 2, 3, 1, 2, 3] (x -> x < 3)
# # [3, 1, 2, 3]
# ```
drop_while : `m<`t> -> (`t -> 𝔹) -> `m<`t>
	where `m is Sequence
drop_while = seq -> predicate ->
	case head seq
	| None => seq
	| Some x =>
		case (predicate x)
		| true => drop_while (tail seq) predicate
		| false => seq

# Attempts to return the element at the given index in the sequence. If the
# index is out of bounds, `None` is returned.
#
# ```aml
# [1, 2, 3] @ 0
# # Some 1
#
# [1, 2, 3] @ 3
# # None
# ```
(@) : `m<`t> -> ℤ -> Maybe<`t>
	where `m is Sequence
(@) = seq -> index ->
	case (index < 0)
	| true => None
	| false =>
		case head seq
		| None => None
		| Some x =>
			case (index == 0)
			| true => Some x
			| false => (tail seq) @ (index - 1)

# Returns a new sequence which contains all the elements of the first sequence
# which match the given predicate function.
#
# ```aml
# filter [1, 2, 3] (x -> x < 3)
# # [1, 2]
# ```
filter : `m<`t> -> (`t -> 𝔹) -> `m<`t>
	where `m is Sequence
filter = seq -> predicate ->
	filter_helper = seq' -> predicate' -> acc ->
		case head seq'
		| None => reverse acc
		| Some x =>
			case (predicate' x)
			| true => filter_helper (tail seq') predicate' (x :: acc)
			| false => filter_helper (tail seq') predicate' acc

	filter_helper seq predicate []

# Takes a sequence of sequences and returns a new sequence with all of the
# elements in the sub-sequences concatenated together.
#
# ```aml
# ↓ [[1, 2], [3, 4]]
# # [1, 2, 3, 4]
# ```
↓ : `m<`m<`t>> -> `m<`t>
	where `m is Sequence
↓ = seq -> fold seq (++)

# Folds a sequence into a single value by applying a function pairwise to
# all elements in the sequence.
#
# ```aml
# fold [1, 2, 3] (+)
# # 6
# ```
fold : `m<`t> -> (`t -> `t -> `t) -> `t
	where `m is Sequence
	where `t is Plus
fold = seq -> callback ->
	case seq
	| [ ] => 𝟘
	| [x] => x
	| x :: xs => reduce xs callback x

# Returns the first element in the sequence, if it exists.
#
# ```aml
# head [1, 2, 3]
# # Some 1
#
# head []
# # None
# ```
head : `m<`t> -> Maybe<`t>
	where `m is Sequence

# Returns true if the given element is in the sequence. Returns false otherwise.
#
# ```aml
# 2 ∈ [1, 2, 3]
# # true
#
# 4 ∈ [1, 2, 3]
# # false
# ```
(∈) : `t -> `m<`t> -> 𝔹
	where `m is Sequence
	where `t is Comparable
(∈) = ⇋ ∋

# Returns true if the given element is not in the sequence. Returns false
# otherwise.
#
# ```aml
# 2 ∉ [1, 2, 3]
# # false
#
# 4 ∉ [1, 2, 3]
# # true
# ```
(∉) = ¬ ∘∘∘ (∈)

# Returns true if the first sequence is a subset of the second sequence; in
# other words, if all elements in the first sequence are also in the second
# sequence.
#
# ```aml
# [1, 2, 3] ⊂ [1, 2, 3, 4]
# # true
#
# [1, 2, 3] ⊂ [1, 2, 3]
# # true
#
# [1, 2, 3] ⊂ [1, 2]
# # false
# ```
(⊂) : `m<`t> -> `m<`t> -> 𝔹
	where `m is Sequence
	where `t is Comparable
(⊂) = a -> b -> ∀ a (∋ b)

# Checks to see if the first sequence is not a subset of the second sequence, or
# in other words, if the first sequence contains at least one element that is
# not in the second sequence.
#
# ```aml
# [1, 2, 3] ⊄ [1, 2, 3, 4]
# # false
#
# [1, 2, 3] ⊄ [1, 2, 3]
# # false
#
# [1, 2, 3] ⊄ [1, 2]
# # true
# ```
(⊄) = ¬ ∘∘∘ (⊂)

# Returns the length of the sequence.
#
# ```aml
# length [1, 2, 3]
# # 3
# ```
length : `m<`t> -> ℕ
	where `m is Sequence
length = seq -> reduce seq ((+ 1) ∘∘∘ const) 0

# Returns a new sequence with the given element added on the front.
#
# ```aml
# 1 :: [2, 3]
# # [1, 2, 3]
# ```
(::) : `t -> `m<`t> -> `m<`t>
	where `m is Sequence

# Reduce a sequence to a single value by applying a function to each element and
# passing an accumulator value between each application.
#
# ```aml
# reduce [1, 2, 3] (+) 0
# # 6
# ```
reduce : `m<`t> -> (`a -> `t -> `a) -> `a -> `a
	where `m is Sequence
reduce = seq -> callback -> initial ->
	case head seq
	| Some x => reduce (tail seq) callback (callback initial x)
	| None => initial

# Returns a new sequence with the order of the elements reversed.
#
# ```aml
# reverse [1, 2, 3]
# # [3, 2, 1]
# ```
reverse : `m<`t> -> `m<`t>
	where `m is Sequence
reverse = seq ->
	reverse_helper = seq' -> acc ->
		case head seq'
		| Some x => reverse_helper (tail seq') (x :: acc)
		| None => acc

	reverse_helper seq []

# Sums the elements of the sequence.
#
# ```aml
# ∑ [1, 2, 3] ι
# # 6
# ```
∑ : `m<`a> -> (`a -> `t) -> `t
	where `m is Sequence
∑ = seq -> map -> reduce (seq <$> map) (+) 0

# Returns a new sequence with all elements in the input sequence except the
# first one. If the input sequence is empty, an empty sequence is returned.
#
# ```aml
# tail [1, 2, 3]
# # [2, 3]
# ```
tail : `m<`t> -> `m<`t>
	where `m is Sequence

# Returns a new sequence which contains all the unique elements of both input
# sequences.
#
# ```aml
# [1, 2, 3] ∪ [2, 3, 4]
# # [1, 2, 3, 4]
# ```
(∪) : `m<`t> -> `m<`t> -> `m<`t>
	where `m is Sequence
(∪) = a -> b -> a ++ (b \ a)
