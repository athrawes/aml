{ Pair, fst, snd } = use "Collections/Pair"
Seq = use "Collections/Sequences/Seq"

module List extends Monad Seq

type List<'t> extends Seq<'t> =
  | NonEmpty of Pair<'t, List<'t>>
  | Empty

[] = List<_>.Empty

from = value -> Pair.from value Empty

map = list -> callback ->
  match list
  | Empty => list
  | NonEmpty (pair) => Pair.from
    (callback (fst pair))
    (map (snd pair) callback)

# Flattens one level of a multi-dimensional list.
flatten = lists ->
  match lists
  | Empty => Empty
  | NonEmpty (pair) => concat (fst pair) (flatten (snd pair))

# Returns a new list which is the result of appending two lists together. The
# lists are concatenated left to right, so the elements from the first list
# provided come first in the list, and the elements from the second list
# provided come later.
concat = first -> second ->
  match first
  | Empty => second
  | NonEmpty (pair) => Pair.from
    (fst pair)
    (concat (snd pair) second)

# Returns a new list with a given item prepended to it.
prepend = item -> list -> Pair.from item list

# Returns a new list which is in the reverse order of the input list.
reverse : List<'t> -> List<'t>
reverse = list ->
  match list
  | Empty => list
  | NonEmpty (pair) => concat
    (reverse (snd pair))
    (from (fst pair))
