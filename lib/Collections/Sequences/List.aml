{ Pair, fst, snd } ≔ use "Collections/Pair"
Sequence ≔ use "Collections/Sequences/Sequence"
{ None } ≔ use "Effects/Maybe"

type List<'t> extends Sequence<'t> ≔
	| NonEmpty of Pair<'t, List<'t>>
	| Empty of None

# Determines whether two lists are equal. Two lists are equal if they have the
# same elements in the same order.
#
# @template {Setoid} 't
#   The type of the elements in the list.
#
# @param {List<'t>} a
#   The first list to compare.
# @param {List<'t>} b
#   The second list to compare.
#
# @returns {𝔹}
#   `true` if the lists are equal, `false` otherwise.
#
# ```aml
# [1, 2, 3] = [1, 2, 3]
# # true
#
# [1, 2, 3] = [1, 2, 4]
# # false
# ```
(=) ∷ Setoid 't ⇒ List<'t> → List<'t> → 𝔹
(=) ≔ a → b →
	case a, b
	| Empty, Empty ⇒ true
	| NonEmpty (p1), NonEmpty (p2) ⇒ p1 = p2
	| _ ⇒ false

# Returns a new list which has the given item appended to the end of it.
#
# @template 't
#   The type of the elements in the list.
#
# @param {List<'t>} list
#   The list to which the item should be appended.
# @param {'t} item
#   The item to append to the list.
#
# @returns {List<'t>}
#   A new list which is the result of appending the item to the end of the input
#
# ```aml
# append [1, 2, 3] 4
# # [1, 2, 3, 4]
# ```
append ≔ list → item →
	case list
	| Empty ⇒ ↑ item
	| NonEmpty (pair) ⇒ Pair.↑
		(fst pair)
		(append (snd pair) item)

# Returns a new list which is the result of appending two lists together. The
# lists are concatenated left to right, so the elements from the first list
# provided come first in the list, and the elements from the second list
# provided come later.
#
# @template 't
#   The type of the elements in the list.
#
# @param {List<'t>} first
#   The first list to concatenate.
# @param {List<'t>} second
#   The second list to concatenate.
#
# @returns {List<'t>}
#   A new list which is the result of concatenating the two lists together.
#
# ```aml
# concat [1, 2, 3] [4, 5, 6]
# # [1, 2, 3, 4, 5, 6]
# ```
concat ≔ first → second →
	case first
	| Empty ⇒ second
	| NonEmpty (pair) ⇒ Pair.↑
		(fst pair)
		(concat (snd pair) second)

# Returns a new list with the given item as the first and only element.
#
# @template 't
#   The type of the elements in the list.
#
# @param {'t} value
#   The value to put in the list.
#
# @returns {List<'t>}
#   A new list with the given value as the first and only element.
#
# ```aml
# ↑ 1
# # [1]
# ```
↑ ≔ value → Pair.↑ value Empty

# Returns the first element of a list, if it exists.
#
# @template 't
#   The type of the elements in the list.
#
# @param {List<'t>} list
#   The list from which to get the first element.
#
# @returns {Maybe<'t>}
#   `Some` with the first element of the list if it exists, `None` otherwise.
#
# ```aml
# head [1, 2, 3]
# # Some 1
#
# head []
# # None
# ```
head ∷ List<'t> → Maybe<'t>
head ≔ list →
	case list
	| Empty ⇒ None
	| NonEmpty (pair) ⇒ Some (fst pair)

# Creates a new list from a given list and a callback to transform each element
# in the list.
#
# @template 't
#   The type of the elements in the list.
# @template 'u
#   The type of the elements in the new list.
#
# @param {List<'t>} list
#   The list to map over.
# @param {'t → 'u} callback
#   The callback to transform each element in the list.
#
# @returns {List<'u>}
#   A new list with the result of applying the callback to each element in the
#
# ```aml
# [1, 2, 3] <$> (x → x + 1)
# # [2, 3, 4]
# ```
(<$>) ≔ list → callback →
	case list
	| Empty ⇒ list
	| NonEmpty (pair) ⇒ Pair.↑
		(callback (fst pair))
		((snd pair) <$> callback)

# Returns a new list which has all elements of the input list except for the
# first element. If the input list is empty or has only one element, an empty
# list is returned.
#
# @template 't
#   The type of the elements in the list.
#
# @param {List<'t>} list
#   The list from which to remove the first element.
#
# @returns {List<'t>}
#   A new list with all elements of the input list except for the first element.
#
# ```aml
# tail [1, 2, 3]
# # [2, 3]
#
# tail [1]
# # []
#
# tail []
# # []
# ```
tail ∷ List<'t> → List<'t>
tail ≔ list →
	case list
	| Empty ⇒ list
	| NonEmpty (pair) ⇒ snd pair

# Returns a new list with a given item prepended to it.
#
# @template 't
#   The type of the elements in the list.
#
# @param {'t} item
#   The item to prepend to the list.
#
# @returns {List<'t>}
#   A new list with the given item as the first element.
#
# ```aml
# 1 :: [2, 3]
# # [1, 2, 3]
# ```
(::) ∷ 't → List<'t> → List<'t>
(::) ≔ Pair.↑

# Returns a new list which is in the reverse order of the input list.
#
# @template 't
#   The type of the elements in the list.
#
# @param {List<'t>} list
#   The list to reverse.
#
# @returns {List<'t>}
#   A new list which is the reverse of the input list.
#
# ```aml
# reverse [1, 2, 3]
# # [3, 2, 1]
# ```
reverse ∷ List<'t> → List<'t>
reverse ≔ list →
	case list
	| Empty ⇒ list
	| NonEmpty (pair) ⇒ concat
		(reverse (snd pair))
		(↑ (fst pair))
