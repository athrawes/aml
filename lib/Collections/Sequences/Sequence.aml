{ 𝔹, false, or, ¬ } ≔ use "Prelude/Boolean"

module Sequence extends Monoid Monad Traversable
	type Sequence<'a>

# Returns true if all elements in the sequence satisfy the given predicate
# function. Returns false otherwise.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to check.
# @param {('t → 𝔹)} predicate
#   The predicate function to check against.
#
# @returns {𝔹}
#   True if all elements in the sequence satisfy the given predicate.
#
# ```aml
# ∀ [1, 2, 3] (x → x < 4)
# # true
#
# ∀ [1, 2, 3] (x → x < 3)
# # false
# ```
∀ ∷ Sequence 'm ⇒ 'm<'t> → ('t → 𝔹) → 𝔹
∀ ≔ seq → predicate → ¬ (∃ seq (¬ ∘> predicate)))

# Returns true if there exists any element in the sequence satisfies the given
# predicate function. Returns false otherwise.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to check.
# @param {('t → 𝔹)} predicate
#   The predicate function to check against.
#
# @returns {𝔹}
#   True if any element in the sequence satisfies the given predicate.
#
# ```aml
# ∃ [1, 2, 3] (x → x = 2)
# # true
#
# ∃ [1, 2, 3] (x → x = 4)
# # false
# ```
∃ ∷ Sequence 'm ⇒ 'm<'t> → ('t → 𝔹) → 𝔹
∃ ≔ seq → predicate → reduce seq (or ∘> predicate) false

# Returns true if none of the elements in the sequence satisfy the given
# predicate function. Returns false otherwise.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to check.
# @param {('t → 𝔹)} predicate
#   The predicate function to check against.
#
# @returns {𝔹}
#   True if none of the elements in the sequence satisfy the given predicate.
#
# ```aml
# [1, 2, 3] ∄ (x → x = 2)
# # false
#
# [1, 2, 3] ∄ (x → x = 4)
# # true
# ```
(∄) ≔ ¬ ∘∘> ∃

# @inheritdoc
(>>=) ≔ flatten ∘∘> <$>

# Determines if the given element is in the sequence. The elements of the
# sequence must be comparable using the `=` operator.
#
# @template {Setoid} 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to check.
# @param {'t} element
#   The element to check for.
#
# @returns {𝔹}
#   True if the element is in the sequence. False otherwise.
#
# ```aml
# [1, 2, 3] ∋ 2
# # true
#
# [1, 2, 3] ∋ 4
# # false
# ```
(∋) ∷ Sequence 'm, Setoid 't ⇒ 'm<'t> → 't → 𝔹
(∋) ≔ seq → element → ∃ seq (= element)

# Determines if the given element is not in the sequence. The elements of the
# sequence must be comparable using the `=` operator.
#
# @template {Setoid} 't The type of the elements in the sequence.
# @template {Sequence} 'm The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to check.
# @param {'t} element
#   The element to check for.
#
# @returns {𝔹}
#   True if the element is not in the sequence. False otherwise.
#
# ```aml
# 2 ∌ [1, 2, 3]
# # false
#
# 4 ∌ [1, 2, 3]
# # true
# ```
(∌) ≔ ¬ ∘∘> (∋)

# Returns a new sequence which contains all the elements of the first sequence
# which are not in the second sequence.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} a
#   The first sequence.
# @param {'m<'t>} b
#   The second sequence.
#
# @returns {'m<'t>}
#   A new sequence with the difference of the two sequences.
#
# ```aml
# [1, 2, 3] \ [2, 3, 4]
# # [1]
# ```
(\) ∷ Sequence 'm ⇒ 'm<'t> → 'm<'t> → 'm<'t>
(\) ≔ a → b → filter a (∌ b)

# Drops the first `count` elements from the sequence and returns a new sequence
# with the remaining elements. If `count` is greater than the number of elements
# in the sequence, an empty sequence is returned.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to drop elements from.
# @param {ℕ} count
#   The number of elements to drop.
#
# @returns {'m<'t>}
#   A new sequence with the remaining elements.
#
# ```aml
# drop 2 [1, 2, 3]
# # [3]
# ```
drop ∷ Sequence 'm ⇒ 'm<'t> → ℕ → 'm<'t>
drop ≔ seq → count →
	if count < 1
	then seq
	else drop (count - 1) (tail seq)

# Drops elements from the sequence until the predicate function returns false.
# Returns a new sequence with the remaining elements. If the predicate function
# always returns true, an empty sequence is returned.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to drop elements from.
# @param {('t → 𝔹)} predicate
#   The predicate function to check against.
#
# @returns {'m<'t>}
#   A new sequence with the remaining elements.
#
# ```aml
# drop_while [1, 2, 3, 1, 2, 3] (x → x < 3)
# # [3, 1, 2, 3]
# ```
drop_while ∷ Sequence 'm ⇒ 'm<'t> → ('t → 𝔹) → 'm<'t>
drop_while ≔ seq → predicate →
	match head seq
	| None ⇒ seq
	| Some x ⇒
		if predicate x
		then drop_while (tail seq) predicate
		else seq

# Attempts to return the element at the given index in the sequence. If the
# index is out of bounds, `None` is returned.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to get the element from.
# @param {ℤ} index
#   The index of the element to get.
#
# @returns {Maybe<'t>}
#   The element at the given index, or `None` if the index is out of bounds.
#
# ```aml
# [1, 2, 3] @ 0
# # Some 1
#
# [1, 2, 3] @ 3
# # None
# ```
(@) ∷ Sequence 'm ⇒ 'm<'t> → ℤ → Maybe<'t>
(@) ≔ seq → index →
	if index < 0
	then None
	else
		match head seq
		| None ⇒ None
		| Some x ⇒
			if index = 0
			then Some x
			else (tail seq) @ (index - 1)

# Returns a new sequence which contains all the elements of the first sequence
# which match the given predicate function.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to filter.
# @param {('t → 𝔹)} predicate
#   The predicate function to check against.
#
# @returns {'m<'t>}
#   A new sequence with the elements that match the predicate.
#
# ```aml
# filter [1, 2, 3] (x → x < 3)
# # [1, 2]
# ```
filter ∷ Sequence 'm ⇒ 'm<'t> → ('t → 𝔹) → 'm<'t>
filter ≔ seq → predicate →
	filter_helper ≔ seq' → predicate' → acc →
		match head seq'
		| None ⇒ reverse acc
		| Some x ⇒
			if predicate' x
			then filter_helper (tail seq') predicate' (x :: acc)
			else filter_helper (tail seq') predicate' acc

	filter_helper seq predicate empty

# Takes a sequence of sequences and returns a new sequence with all of the
# elements in the sub-sequences concatenated together.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'m<'t>>} seq
#   The sequence of sequences to flatten.
#
# @returns {'m<'t>}
#   A new sequence with all the elements of the sub-sequences concatenated
#
# ```aml
# flatten [[1, 2], [3, 4]]
# # [1, 2, 3, 4]
# ```
flatten ∷ Sequence 'm ⇒ 'm<'m<'t>> → 'm<'t>
flatten ≔ seq →
	match head seq with
	| Some x ⇒ concat x (flatten (tail seq))
	| None ⇒ seq

# Returns the first element in the sequence, if it exists.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to get the first element from.
#
# @returns {Maybe<'t>}
#   The first element in the sequence, or `None` if the sequence is empty.
#
# ```aml
# head [1, 2, 3]
# # Some 1
#
# head []
# # None
# ```
head ∷ Sequence 'm ⇒ 'm<'t> → Maybe<'t>

# Returns true if the given element is in the sequence. Returns false otherwise.
#
# @template {Setoid} 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'t} element
#   The element to check for.
# @param {'m<'t>} seq
#   The sequence to check.
#
# @returns {𝔹}
#   True if the element is in the sequence. False otherwise.
#
# ```aml
# 2 ∈ [1, 2, 3]
# # true
#
# 4 ∈ [1, 2, 3]
# # false
# ```
(∈) ∷ Sequence 'm, Setoid 't ⇒ 't → 'm<'t> → 𝔹
(∈) ≔ ⇋ ∋

# Returns true if the given element is not in the sequence. Returns false
# otherwise.
#
# @template {Setoid} 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'t} element
#   The element to check for.
# @param {'m<'t>} seq
#   The sequence to check.
#
# @returns {𝔹}
#   True if the element is not in the sequence. False otherwise.
#
# ```aml
# 2 ∉ [1, 2, 3]
# # false
#
# 4 ∉ [1, 2, 3]
# # true
# ```
(∉) ≔ ¬ ∘∘> (∈)

# Returns true if the first sequence is a subset of the second sequence; in
# other words, if all elements in the first sequence are also in the second
# sequence.
#
# @template {Setoid} 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} a
#   The first sequence.
# @param {'m<'t>} b
#   The second sequence.
#
# @returns {𝔹}
#   True if the first sequence is a subset of the second sequence.
#
# ```aml
# [1, 2, 3] ⊂ [1, 2, 3, 4]
# # true
#
# [1, 2, 3] ⊂ [1, 2, 3]
# # true
#
# [1, 2, 3] ⊂ [1, 2]
# # false
# ```
(⊂) ∷ Sequence 'm, Setoid 't ⇒ 'm<'t> → 'm<'t> → 𝔹
(⊂) ≔ a → b → ∀ a (∋ b)

# Checks to see if the first sequence is not a subset of the second sequence, or
# in other words, if the first sequence contains at least one element that is
# not in the second sequence.
#
# @template {Setoid} 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} a
#   The first sequence.
# @param {'m<'t>} b
#   The second sequence.
#
# @returns {𝔹}
#   True if the first sequence is not a subset of the second sequence.
#
# ```aml
# [1, 2, 3] ⊄ [1, 2, 3, 4]
# # false
#
# [1, 2, 3] ⊄ [1, 2, 3]
# # false
#
# [1, 2, 3] ⊄ [1, 2]
# # true
# ```
(⊄) ≔ ¬ ∘∘> (⊂)

# Returns the length of the sequence.
#
# @template 't
# @template {Sequence} 'm
#
# @param {'m<'t>} seq
#   The sequence to get the length of.
#
# @returns {ℕ}
#   The length of the sequence.
#
# ```aml
# length [1, 2, 3]
# # 3
# ```
length ∷ Sequence 'm ⇒ 'm<'t> → ℕ
length ≔ seq → reduce seq ((+ 1) ∘∘> const) 0

# Returns a new sequence with the given element added on the front.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'t} element
#   The element to add to the front of the sequence.
# @param {'m<'t>} seq
#   The sequence to add the element to.
#
# @returns {'m<'t>}
#   A new sequence with the element added to the front.
#
# ```aml
# 1 :: [2, 3]
# # [1, 2, 3]
# ```
(::) ∷ Sequence 'm ⇒ 't → 'm<'t> → 'm<'t>

# Reduce a sequence to a single value by applying a function to each element and
# passing an accumulator value between each application.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
# @template 'a
#   The type of the accumulator.
#
# @param {'m<'t>} seq
#   The sequence to reduce.
# @param {('a → 't → 'a)} callback
#   The function to apply to each element and the accumulator. Should return the
#   new accumulator value.
# @param {'a} initial
#   The initial value of the accumulator.
#
# @returns {'a}
#   The final value of the accumulator after reducing the sequence.
#
# ```aml
# reduce [1, 2, 3] (+) 0
# # 6
# ```
reduce ∷ Sequence 'm ⇒ 'm<'t> → ('a → 't → 'a) → 'a → 'a
reduce ≔ seq → callback → initial →
	match head seq
	| Some x ⇒ reduce (tail seq) callback (callback initial x)
	| None ⇒ initial

# Returns a new sequence with the order of the elements reversed.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to reverse.
#
# @returns {'m<'t>}
#   A new sequence with the elements reversed.
#
# ```aml
# reverse [1, 2, 3]
# # [3, 2, 1]
# ```
reverse ∷ Sequence 'm ⇒ 'm<'t> → 'm<'t>
reverse ≔ seq →
	reverse_helper ≔ seq' → acc →
		match head seq'
		| Some x ⇒ reverse_helper (tail seq') (x :: acc)
		| None ⇒ acc

	reverse_helper seq []

# Sums the elements of the sequence.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to sum.
# @param {('t → ℤ)} map
#   A function to transform each element into a number to sum by. If you want to
#   sum the elements as they are, you can use the identity function `ι`.
#
# @returns {ℤ}
#   The sum of the elements in the sequence.
#
# ```aml
# ∑ [1, 2, 3] ι
# # 6
# ```
∑ ∷ Sequence 'm ⇒ 'm<'a> → ('a → ℤ) → 't
∑ ≔ seq → map → reduce (seq <$> map) (+) 0

# Returns a new sequence with all elements in the input sequence except the
# first one. If the input sequence is empty, an empty sequence is returned.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to get the tail of.
#
# @returns {'m<'t>}
#   A new sequence with all elements except the first one.
#
# ```aml
# tail [1, 2, 3]
# # [2, 3]
# ```
tail ∷ Sequence 'm ⇒ 'm<'t> → 'm<'t>

# Returns a new sequence which contains all the unique elements of both input
# sequences.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} a
#   The first sequence.
# @param {'m<'t>} b
#   The second sequence.
#
# @returns {'m<'t>}
#   A new sequence with all the unique elements of both input sequences.
#
# ```aml
# [1, 2, 3] ∪ [2, 3, 4]
# # [1, 2, 3, 4]
# ```
(∪) ∷ Sequence 'm ⇒ 'm<'t> → 'm<'t> → 'm<'t>
(∪) ≔ a → b → a ++ (b \ a)
