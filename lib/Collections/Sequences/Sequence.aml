{ ùîπ, false, ‚à®, ¬¨ } := use "Prelude/Boolean"

type Sequence<'a> extends
	Foldable<'a>,
	Filterable<'a>,
	Monoid<'a>,
	Monad<'a>,
	Traversable<'a>,

# Returns true if all elements in the sequence satisfy the given predicate
# function. Returns false otherwise.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to check.
# @param {('t -> ùîπ)} predicate
#   The predicate function to check against.
#
# @returns {ùîπ}
#   True if all elements in the sequence satisfy the given predicate.
#
# ```aml
# ‚àÄ [1, 2, 3] (x -> x < 4)
# # true
#
# ‚àÄ [1, 2, 3] (x -> x < 3)
# # false
# ```
‚àÄ :: Sequence 'm => 'm<'t> -> ('t -> ùîπ) -> ùîπ
‚àÄ := seq -> predicate -> ¬¨ (‚àÉ seq (¬¨ ‚àò predicate))

# Returns true if there exists any element in the sequence satisfies the given
# predicate function. Returns false otherwise.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to check.
# @param {('t -> ùîπ)} predicate
#   The predicate function to check against.
#
# @returns {ùîπ}
#   True if any element in the sequence satisfies the given predicate.
#
# ```aml
# ‚àÉ [1, 2, 3] (x -> x = 2)
# # true
#
# ‚àÉ [1, 2, 3] (x -> x = 4)
# # false
# ```
‚àÉ :: Sequence 'm => 'm<'t> -> ('t -> ùîπ) -> ùîπ
‚àÉ := seq -> predicate -> reduce seq (‚à® ‚àò predicate) false

# Returns true if there exists exactly one element in the sequence that
# satisfies the given predicate function. Returns false otherwise.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to check.
# @param {('t -> ùîπ)} predicate
#   The predicate function to check against.
#
# @returns {ùîπ}
#   True if exactly one element in the sequence satisfies the given
#   predicate.
#
# ```aml
# ‚àÉ! [1, 2, 3] (x -> x = 2)
# # true
#
# ‚àÉ! [1, 2, 3] (x -> x = 4)
# # false
#
# ‚àÉ! [1, 2, 3] (x -> x < 3)
# # false
# ```
‚àÉ! :: Sequence 'm => 'm<'t> -> ('t -> ùîπ) -> ùîπ
‚àÉ! := seq -> predicate ->
	case seq
	| [] => false
	| x :: xs =>
		case (predicate x)
		| true => ¬¨ (‚àÉ xs predicate)
		| false => ‚àÉ! xs predicate

# Returns true if none of the elements in the sequence satisfy the given
# predicate function. Returns false otherwise.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to check.
# @param {('t -> ùîπ)} predicate
#   The predicate function to check against.
#
# @returns {ùîπ}
#   True if none of the elements in the sequence satisfy the given predicate.
#
# ```aml
# [1, 2, 3] ‚àÑ (x -> x = 2)
# # false
#
# [1, 2, 3] ‚àÑ (x -> x = 4)
# # true
# ```
(‚àÑ) := ¬¨ ‚àò‚àò‚àò ‚àÉ

# Applies a sequence of functions to a sequence of values, returning a new
# sequence with the results.
#
# @template 'a
#   The type of the items in the values sequence; also, the input type of
#   the functions in the functions sequence.
# @template 'b
#   The type of the items in the output sequence; also, the output type of
#   the functions in the functions sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<('a -> 'b)>} fs
#   The sequence of functions to apply.
# @param {'m<'a>} xs
#   The sequence of values to apply the functions to.
#
# @returns {'m<'b>}
#   A new sequence with the results of applying the functions to the values.
#
# ```aml
# [(+ 1), (* 10)] <*> [1, 2]
# # [2, 3, 10, 20]
# ```
(<*>) :: Sequence 'm => 'm<('a -> 'b)> -> 'm<'a> -> 'm<'b>
(<*>) := fs -> xs ->
	case xs
	| [] => []
	| x :: xs' => (fs <$> (|> x)) ++ (fs <*> xs')

# @inheritdoc
(>>=) := <$> <‚àò‚àò ‚Üì

# Determines if the given element is in the sequence. The elements of the
# sequence must be comparable using the `=` operator.
#
# @template {Comparable} 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to check.
# @param {'t} element
#   The element to check for.
#
# @returns {ùîπ}
#   True if the element is in the sequence. False otherwise.
#
# ```aml
# [1, 2, 3] ‚àã 2
# # true
#
# [1, 2, 3] ‚àã 4
# # false
# ```
(‚àã) :: Sequence 'm, Comparable 't => 'm<'t> -> 't -> ùîπ
(‚àã) := seq -> element -> ‚àÉ seq (= element)

# Determines if the given element is not in the sequence. The elements of the
# sequence must be comparable using the `=` operator.
#
# @template {Comparable} 't The type of the elements in the sequence.
# @template {Sequence} 'm The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to check.
# @param {'t} element
#   The element to check for.
#
# @returns {ùîπ}
#   True if the element is not in the sequence. False otherwise.
#
# ```aml
# 2 ‚àå [1, 2, 3]
# # false
#
# 4 ‚àå [1, 2, 3]
# # true
# ```
(‚àå) := ¬¨ ‚àò‚àò‚àò (‚àã)

# Returns a new sequence which contains all the elements of the first sequence
# which are not in the second sequence.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} a
#   The first sequence.
# @param {'m<'t>} b
#   The second sequence.
#
# @returns {'m<'t>}
#   A new sequence with the difference of the two sequences.
#
# ```aml
# [1, 2, 3] \ [2, 3, 4]
# # [1]
# ```
(\) :: Sequence 'm => 'm<'t> -> 'm<'t> -> 'm<'t>
(\) := a -> b -> filter a (‚àå b)

# Drops the first `count` elements from the sequence and returns a new sequence
# with the remaining elements. If `count` is greater than the number of elements
# in the sequence, an empty sequence is returned.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to drop elements from.
# @param {‚Ñï} count
#   The number of elements to drop.
#
# @returns {'m<'t>}
#   A new sequence with the remaining elements.
#
# ```aml
# drop 2 [1, 2, 3]
# # [3]
# ```
drop :: Sequence 'm => 'm<'t> -> ‚Ñï -> 'm<'t>
drop := seq -> count ->
	case (count < 1)
	| true => seq
	| false => drop (count - 1) (tail seq)

# Drops elements from the sequence until the predicate function returns false.
# Returns a new sequence with the remaining elements. If the predicate function
# always returns true, an empty sequence is returned.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to drop elements from.
# @param {('t -> ùîπ)} predicate
#   The predicate function to check against.
#
# @returns {'m<'t>}
#   A new sequence with the remaining elements.
#
# ```aml
# drop_while [1, 2, 3, 1, 2, 3] (x -> x < 3)
# # [3, 1, 2, 3]
# ```
drop_while :: Sequence 'm => 'm<'t> -> ('t -> ùîπ) -> 'm<'t>
drop_while := seq -> predicate ->
	case head seq
	| None => seq
	| Some x =>
		case (predicate x)
		| true => drop_while (tail seq) predicate
		| false => seq

# Attempts to return the element at the given index in the sequence. If the
# index is out of bounds, `None` is returned.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to get the element from.
# @param {‚Ñ§} index
#   The index of the element to get.
#
# @returns {Maybe<'t>}
#   The element at the given index, or `None` if the index is out of bounds.
#
# ```aml
# [1, 2, 3] @ 0
# # Some 1
#
# [1, 2, 3] @ 3
# # None
# ```
(@) :: Sequence 'm => 'm<'t> -> ‚Ñ§ -> Maybe<'t>
(@) := seq -> index ->
	case (index < 0)
	| true => None
	| false =>
		case head seq
		| None => None
		| Some x =>
			case (index = 0)
			| true => Some x
			| false => (tail seq) @ (index - 1)

# Returns a new sequence which contains all the elements of the first sequence
# which match the given predicate function.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to filter.
# @param {('t -> ùîπ)} predicate
#   The predicate function to check against.
#
# @returns {'m<'t>}
#   A new sequence with the elements that match the predicate.
#
# ```aml
# filter [1, 2, 3] (x -> x < 3)
# # [1, 2]
# ```
filter :: Sequence 'm => 'm<'t> -> ('t -> ùîπ) -> 'm<'t>
filter := seq -> predicate ->
	filter_helper := seq' -> predicate' -> acc ->
		case head seq'
		| None => reverse acc
		| Some x =>
			case (predicate' x)
			| true => filter_helper (tail seq') predicate' (x :: acc)
			| false => filter_helper (tail seq') predicate' acc

	filter_helper seq predicate []

# Takes a sequence of sequences and returns a new sequence with all of the
# elements in the sub-sequences concatenated together.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'m<'t>>} seq
#   The sequence of sequences to flatten.
#
# @returns {'m<'t>}
#   A new sequence with all the elements of the sub-sequences concatenated
#
# ```aml
# ‚Üì [[1, 2], [3, 4]]
# # [1, 2, 3, 4]
# ```
‚Üì :: Sequence 'm => 'm<'m<'t>> -> 'm<'t>
‚Üì := seq -> fold seq (++)

# Folds a sequence into a single value by applying a function pairwise to
# all elements in the sequence.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to fold.
#
# @param {('t -> 't -> 't)} callback
#   The function to apply to each pair of elements in the sequence.
#
# @returns {'t}
#   The final value of the fold.
#
# ```aml
# fold [1, 2, 3] (+)
# # 6
# ```
fold :: Sequence 'm, Plus 't => 'm<'t> -> ('t -> 't -> 't) -> 't
fold := seq -> callback ->
	case seq
	| [ ] => ùüò
	| [x] => x
	| x :: xs => reduce xs callback x

# Returns the first element in the sequence, if it exists.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to get the first element from.
#
# @returns {Maybe<'t>}
#   The first element in the sequence, or `None` if the sequence is empty.
#
# ```aml
# head [1, 2, 3]
# # Some 1
#
# head []
# # None
# ```
head :: Sequence 'm => 'm<'t> -> Maybe<'t>

# Returns true if the given element is in the sequence. Returns false otherwise.
#
# @template {Comparable} 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'t} element
#   The element to check for.
# @param {'m<'t>} seq
#   The sequence to check.
#
# @returns {ùîπ}
#   True if the element is in the sequence. False otherwise.
#
# ```aml
# 2 ‚àà [1, 2, 3]
# # true
#
# 4 ‚àà [1, 2, 3]
# # false
# ```
(‚àà) :: Sequence 'm, Comparable 't => 't -> 'm<'t> -> ùîπ
(‚àà) := ‚áã ‚àã

# Returns true if the given element is not in the sequence. Returns false
# otherwise.
#
# @template {Comparable} 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'t} element
#   The element to check for.
# @param {'m<'t>} seq
#   The sequence to check.
#
# @returns {ùîπ}
#   True if the element is not in the sequence. False otherwise.
#
# ```aml
# 2 ‚àâ [1, 2, 3]
# # false
#
# 4 ‚àâ [1, 2, 3]
# # true
# ```
(‚àâ) := ¬¨ ‚àò‚àò‚àò (‚àà)

# Returns true if the first sequence is a subset of the second sequence; in
# other words, if all elements in the first sequence are also in the second
# sequence.
#
# @template {Comparable} 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} a
#   The first sequence.
# @param {'m<'t>} b
#   The second sequence.
#
# @returns {ùîπ}
#   True if the first sequence is a subset of the second sequence.
#
# ```aml
# [1, 2, 3] ‚äÇ [1, 2, 3, 4]
# # true
#
# [1, 2, 3] ‚äÇ [1, 2, 3]
# # true
#
# [1, 2, 3] ‚äÇ [1, 2]
# # false
# ```
(‚äÇ) :: Sequence 'm, Comparable 't => 'm<'t> -> 'm<'t> -> ùîπ
(‚äÇ) := a -> b -> ‚àÄ a (‚àã b)

# Checks to see if the first sequence is not a subset of the second sequence, or
# in other words, if the first sequence contains at least one element that is
# not in the second sequence.
#
# @template {Comparable} 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} a
#   The first sequence.
# @param {'m<'t>} b
#   The second sequence.
#
# @returns {ùîπ}
#   True if the first sequence is not a subset of the second sequence.
#
# ```aml
# [1, 2, 3] ‚äÑ [1, 2, 3, 4]
# # false
#
# [1, 2, 3] ‚äÑ [1, 2, 3]
# # false
#
# [1, 2, 3] ‚äÑ [1, 2]
# # true
# ```
(‚äÑ) := ¬¨ ‚àò‚àò‚àò (‚äÇ)

# Returns the length of the sequence.
#
# @template 't
# @template {Sequence} 'm
#
# @param {'m<'t>} seq
#   The sequence to get the length of.
#
# @returns {‚Ñï}
#   The length of the sequence.
#
# ```aml
# length [1, 2, 3]
# # 3
# ```
length :: Sequence 'm => 'm<'t> -> ‚Ñï
length := seq -> reduce seq ((+ 1) ‚àò‚àò‚àò const) 0

# Returns a new sequence with the given element added on the front.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'t} element
#   The element to add to the front of the sequence.
# @param {'m<'t>} seq
#   The sequence to add the element to.
#
# @returns {'m<'t>}
#   A new sequence with the element added to the front.
#
# ```aml
# 1 :: [2, 3]
# # [1, 2, 3]
# ```
(::) :: Sequence 'm => 't -> 'm<'t> -> 'm<'t>

# Reduce a sequence to a single value by applying a function to each element and
# passing an accumulator value between each application.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
# @template 'a
#   The type of the accumulator.
#
# @param {'m<'t>} seq
#   The sequence to reduce.
# @param {('a -> 't -> 'a)} callback
#   The function to apply to each element and the accumulator. Should return the
#   new accumulator value.
# @param {'a} initial
#   The initial value of the accumulator.
#
# @returns {'a}
#   The final value of the accumulator after reducing the sequence.
#
# ```aml
# reduce [1, 2, 3] (+) 0
# # 6
# ```
reduce :: Sequence 'm => 'm<'t> -> ('a -> 't -> 'a) -> 'a -> 'a
reduce := seq -> callback -> initial ->
	case head seq
	| Some x => reduce (tail seq) callback (callback initial x)
	| None => initial

# Returns a new sequence with the order of the elements reversed.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to reverse.
#
# @returns {'m<'t>}
#   A new sequence with the elements reversed.
#
# ```aml
# reverse [1, 2, 3]
# # [3, 2, 1]
# ```
reverse :: Sequence 'm => 'm<'t> -> 'm<'t>
reverse := seq ->
	(seq' -> acc ->
		case head seq'
		| Some x => reverse_helper (tail seq') (x :: acc)
		| None => acc
	) seq []

# Sums the elements of the sequence.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to sum.
# @param {('t -> ‚Ñ§)} map
#   A function to transform each element into a number to sum by. If you want to
#   sum the elements as they are, you can use the identity function `Œπ`.
#
# @returns {‚Ñ§}
#   The sum of the elements in the sequence.
#
# ```aml
# ‚àë [1, 2, 3] Œπ
# # 6
# ```
‚àë :: Sequence 'm => 'm<'a> -> ('a -> ‚Ñ§) -> 't
‚àë := seq -> map -> reduce (seq <$> map) (+) 0

# Returns a new sequence with all elements in the input sequence except the
# first one. If the input sequence is empty, an empty sequence is returned.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} seq
#   The sequence to get the tail of.
#
# @returns {'m<'t>}
#   A new sequence with all elements except the first one.
#
# ```aml
# tail [1, 2, 3]
# # [2, 3]
# ```
tail :: Sequence 'm => 'm<'t> -> 'm<'t>

# Returns a new sequence which contains all the unique elements of both input
# sequences.
#
# @template 't
#   The type of the elements in the sequence.
# @template {Sequence} 'm
#   The type of the sequence.
#
# @param {'m<'t>} a
#   The first sequence.
# @param {'m<'t>} b
#   The second sequence.
#
# @returns {'m<'t>}
#   A new sequence with all the unique elements of both input sequences.
#
# ```aml
# [1, 2, 3] ‚à™ [2, 3, 4]
# # [1, 2, 3, 4]
# ```
(‚à™) :: Sequence 'm => 'm<'t> -> 'm<'t> -> 'm<'t>
(‚à™) := a -> b -> a ++ (b \ a)
