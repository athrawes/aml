module Array extends Sequence

type Array<'a> extends Sequence<'a> ≔ {
	address: Pointer,
	element_size: ℕ ≔ sizeof<'a>,
	length: ℕ,
}

(@) ∷ Array<'a> → ℤ → Maybe<'a>
(@) ≔ array → index →
	if ((index ≥ 0) ∧ (index < array.length))
	then
		read_address ≔ array.address + (array.element_size * index)
		read_length ≔ array.element_size
		Some (INTRINSIC_MEMORY_READ read_address read_length)
	else None

empty ≔ Array {
	address ≔ Pointer 0,
	element_size ≔ 0,
	length ≔ 0,
}

head ≔ array →
	if array.length = 0
	then None
	else Some (INTRINSIC_MEMORY_READ array.address array.element_size)

tail ≔ array →
	if array.length ≤ 1
	then empty
	else Array {
		address ≔ Pointer (array.address + array.element_size),
		element_size ≔ array.element_size,
		length ≔ array.length - 1,
	}

read ∷ Array<'a> → ℕ → Maybe<'a>
read ≔ array → index →
	if ((index ≥ 0) ∧ (index < array.length))
	then
		read_address ≔ array.address + (array.element_size * index)
		read_length ≔ array.element_size
		Some (INTRINSIC_MEMORY_READ read_address read_length)
	else None

(::) ∷ Array<'a> → 'a → Array<'a>
(::) ≔ array → element →
	address ≔ INTRINSIC_ALLOCATE_MEMORY (array.element_size * (array.length + 1))

	INTRINSIC_MEMORY_COPY
		(address)
		(address + array.element_size)
		(array.element_size * array.length)

	INTRINSIC_MEMORY_COPY
		(address_of element)
		(address)
		(size_of element)

	Array {
		address ≔ address,
		element_size ≔ array.element_size,
		length ≔ array.length + 1,
	}
