{ Sequence } ≔ use "Collections/Sequences/Sequence"

type Array<'a> extends Sequence<'a> ≔  {
	address: Pointer<self>,
	element_size: ℕ ≔ sizeof<'a>,
	length: ℕ,
}

(@) ∷ Array<'a> → ℤ → Maybe<'a>
(@) ≔ array → index →
	case ((index ≥ 0) ∧ (index < array.length))
	| true ⇒
		read_address ≔ array.address + (array.element_size * index)
		read_length ≔ array.element_size
		Some (INTRINSIC_MEMORY_READ read_address read_length)
	| false ⇒ None

∅ ≔ Array {
	address ≔ Pointer 0,
	element_size ≔ 0,
	length ≔ 0,
}

[] ≔ ∅

head ≔ array →
	case (array.length = 0)
	| true ⇒ None
	| false ⇒ Some (INTRINSIC_MEMORY_READ array.address array.element_size)

tail ≔ array →
	case (array.length ≤ 1)
	| true ⇒ ∅
	| false ⇒ Array {
		address ≔ Pointer (array.address + array.element_size),
		element_size ≔ array.element_size,
		length ≔ array.length - 1,
	}

read ∷ Array<'a> → ℕ → Maybe<'a>
read ≔ array → index →
	case ((index ≥ 0) ∧ (index < array.length))
	| true ⇒
		read_address ≔ array.address + (array.element_size * index)
		read_length ≔ array.element_size
		Some (INTRINSIC_MEMORY_READ read_address read_length)
	| false ⇒ None

# Prepend an element to the front of the array.
#
# Note that in contrast to List.::, this operation is not cheap to do and takes
# O(n) time, as it needs to copy the contents of the old array into a new region
# in memory.
(::) ∷ Array<'a> → 'a → Array<'a>
(::) ≔ array → element →
	address ≔ INTRINSIC_ALLOCATE_MEMORY (array.element_size * (array.length + 1))

	INTRINSIC_MEMORY_COPY
		address
		address + array.element_size
		array.element_size * array.length

	INTRINSIC_MEMORY_COPY
		address_of element
		address
		size_of element

	Array {
		address ≔ address,
		element_size ≔ array.element_size,
		length ≔ array.length + 1,
	}
