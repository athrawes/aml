Constructable = use "Control/Constructable"

module Applyable extends Constructable

# Applies functions within an effect to values within the same effect.
#
# ```aml
# function-list = List.from [(add 2), (add 10)]
# values-list = List.from [1, 2, 3]
#
# apply function-list values-list # List<Integer> (3, 4, 5, 11, 12, 13)
# ```
apply : 'm<'a -> 'b> -> 'm<'a> -> 'm<'b>

# An infix alias of `apply`
#
# @include apply
(<*>) = apply

# An infix alias of `apply`, but with the arguments `flip`ped
#
# @include apply
(<**>) : 'm<'a> -> 'm<'a -> 'b> -> 'm<'b>
(<**>) = flip (<*>)

lift-a : ('a -> 'b) -> 'm<'a> -> 'm<'b>
  where 'm extends Applyable
lift-a = callback ma -> (from callback) <*> ma

lift-a2 : ('a -> 'b -> 'c) -> 'm<'a> -> 'm<'b> -> 'm<'c>
  where 'm extends Applyable
lift-a2 = callback ma mb -> (from callback) <*> ma <*> mb

lift-a3 : ('a -> 'b -> 'c -> 'd) -> 'm<'a> -> 'm<'b> -> 'm<'c> -> 'm<'d>
  where 'm extends Applyable
lift-a3 = callback ma mb mc -> (from callback) <*> ma <*> mb <*> mc
