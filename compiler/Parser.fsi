// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EndOfFile
  | EndOfLine
  | BooleanToken
  | StringToken
  | NumberToken
  | Identifier
  | UnitToken
  | InfixOperator
  | SingleQuote
  | DoubleQuote
  | GroupClose
  | GroupOpen
  | MultilineCommentEnd
  | MultilineCommentStart
  | SingleLineComment
  | StructEntryNameValueSeperator
  | StructFieldAccessorOperator
  | StructFieldAliasOperator
  | StructClose
  | StructOpen
  | TupleClose
  | TupleOpen
  | SplatOperator
  | FieldSeparator
  | FunctionOperator
  | TypeBind
  | SymbolBind
  | TypeParameter
  | TypeDeclaration
  | VariableDeclaration
  | Whitespace
type tokenId = 
    | TOKEN_EndOfFile
    | TOKEN_EndOfLine
    | TOKEN_BooleanToken
    | TOKEN_StringToken
    | TOKEN_NumberToken
    | TOKEN_Identifier
    | TOKEN_UnitToken
    | TOKEN_InfixOperator
    | TOKEN_SingleQuote
    | TOKEN_DoubleQuote
    | TOKEN_GroupClose
    | TOKEN_GroupOpen
    | TOKEN_MultilineCommentEnd
    | TOKEN_MultilineCommentStart
    | TOKEN_SingleLineComment
    | TOKEN_StructEntryNameValueSeperator
    | TOKEN_StructFieldAccessorOperator
    | TOKEN_StructFieldAliasOperator
    | TOKEN_StructClose
    | TOKEN_StructOpen
    | TOKEN_TupleClose
    | TOKEN_TupleOpen
    | TOKEN_SplatOperator
    | TOKEN_FieldSeparator
    | TOKEN_FunctionOperator
    | TOKEN_TypeBind
    | TOKEN_SymbolBind
    | TOKEN_TypeParameter
    | TOKEN_TypeDeclaration
    | TOKEN_VariableDeclaration
    | TOKEN_Whitespace
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (string) 
