// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 0 ""

# 8 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EndOfFile
  | EndOfLine
  | BooleanToken
  | StringToken
  | NumberToken
  | Identifier
  | UnitToken
  | InfixOperator
  | SingleQuote
  | DoubleQuote
  | GroupClose
  | GroupOpen
  | MultilineCommentEnd
  | MultilineCommentStart
  | SingleLineComment
  | StructEntryNameValueSeperator
  | StructFieldAccessorOperator
  | StructFieldAliasOperator
  | StructClose
  | StructOpen
  | TupleClose
  | TupleOpen
  | SplatOperator
  | FieldSeparator
  | FunctionOperator
  | TypeBind
  | SymbolBind
  | TypeParameter
  | TypeDeclaration
  | VariableDeclaration
  | Whitespace
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EndOfFile
    | TOKEN_EndOfLine
    | TOKEN_BooleanToken
    | TOKEN_StringToken
    | TOKEN_NumberToken
    | TOKEN_Identifier
    | TOKEN_UnitToken
    | TOKEN_InfixOperator
    | TOKEN_SingleQuote
    | TOKEN_DoubleQuote
    | TOKEN_GroupClose
    | TOKEN_GroupOpen
    | TOKEN_MultilineCommentEnd
    | TOKEN_MultilineCommentStart
    | TOKEN_SingleLineComment
    | TOKEN_StructEntryNameValueSeperator
    | TOKEN_StructFieldAccessorOperator
    | TOKEN_StructFieldAliasOperator
    | TOKEN_StructClose
    | TOKEN_StructOpen
    | TOKEN_TupleClose
    | TOKEN_TupleOpen
    | TOKEN_SplatOperator
    | TOKEN_FieldSeparator
    | TOKEN_FunctionOperator
    | TOKEN_TypeBind
    | TOKEN_SymbolBind
    | TOKEN_TypeParameter
    | TOKEN_TypeDeclaration
    | TOKEN_VariableDeclaration
    | TOKEN_Whitespace
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EndOfFile  -> 0 
  | EndOfLine  -> 1 
  | BooleanToken  -> 2 
  | StringToken  -> 3 
  | NumberToken  -> 4 
  | Identifier  -> 5 
  | UnitToken  -> 6 
  | InfixOperator  -> 7 
  | SingleQuote  -> 8 
  | DoubleQuote  -> 9 
  | GroupClose  -> 10 
  | GroupOpen  -> 11 
  | MultilineCommentEnd  -> 12 
  | MultilineCommentStart  -> 13 
  | SingleLineComment  -> 14 
  | StructEntryNameValueSeperator  -> 15 
  | StructFieldAccessorOperator  -> 16 
  | StructFieldAliasOperator  -> 17 
  | StructClose  -> 18 
  | StructOpen  -> 19 
  | TupleClose  -> 20 
  | TupleOpen  -> 21 
  | SplatOperator  -> 22 
  | FieldSeparator  -> 23 
  | FunctionOperator  -> 24 
  | TypeBind  -> 25 
  | SymbolBind  -> 26 
  | TypeParameter  -> 27 
  | TypeDeclaration  -> 28 
  | VariableDeclaration  -> 29 
  | Whitespace  -> 30 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EndOfFile 
  | 1 -> TOKEN_EndOfLine 
  | 2 -> TOKEN_BooleanToken 
  | 3 -> TOKEN_StringToken 
  | 4 -> TOKEN_NumberToken 
  | 5 -> TOKEN_Identifier 
  | 6 -> TOKEN_UnitToken 
  | 7 -> TOKEN_InfixOperator 
  | 8 -> TOKEN_SingleQuote 
  | 9 -> TOKEN_DoubleQuote 
  | 10 -> TOKEN_GroupClose 
  | 11 -> TOKEN_GroupOpen 
  | 12 -> TOKEN_MultilineCommentEnd 
  | 13 -> TOKEN_MultilineCommentStart 
  | 14 -> TOKEN_SingleLineComment 
  | 15 -> TOKEN_StructEntryNameValueSeperator 
  | 16 -> TOKEN_StructFieldAccessorOperator 
  | 17 -> TOKEN_StructFieldAliasOperator 
  | 18 -> TOKEN_StructClose 
  | 19 -> TOKEN_StructOpen 
  | 20 -> TOKEN_TupleClose 
  | 21 -> TOKEN_TupleOpen 
  | 22 -> TOKEN_SplatOperator 
  | 23 -> TOKEN_FieldSeparator 
  | 24 -> TOKEN_FunctionOperator 
  | 25 -> TOKEN_TypeBind 
  | 26 -> TOKEN_SymbolBind 
  | 27 -> TOKEN_TypeParameter 
  | 28 -> TOKEN_TypeDeclaration 
  | 29 -> TOKEN_VariableDeclaration 
  | 30 -> TOKEN_Whitespace 
  | 33 -> TOKEN_end_of_input
  | 31 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 33 
let _fsyacc_tagOfErrorTerminal = 31

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EndOfFile  -> "EndOfFile" 
  | EndOfLine  -> "EndOfLine" 
  | BooleanToken  -> "BooleanToken" 
  | StringToken  -> "StringToken" 
  | NumberToken  -> "NumberToken" 
  | Identifier  -> "Identifier" 
  | UnitToken  -> "UnitToken" 
  | InfixOperator  -> "InfixOperator" 
  | SingleQuote  -> "SingleQuote" 
  | DoubleQuote  -> "DoubleQuote" 
  | GroupClose  -> "GroupClose" 
  | GroupOpen  -> "GroupOpen" 
  | MultilineCommentEnd  -> "MultilineCommentEnd" 
  | MultilineCommentStart  -> "MultilineCommentStart" 
  | SingleLineComment  -> "SingleLineComment" 
  | StructEntryNameValueSeperator  -> "StructEntryNameValueSeperator" 
  | StructFieldAccessorOperator  -> "StructFieldAccessorOperator" 
  | StructFieldAliasOperator  -> "StructFieldAliasOperator" 
  | StructClose  -> "StructClose" 
  | StructOpen  -> "StructOpen" 
  | TupleClose  -> "TupleClose" 
  | TupleOpen  -> "TupleOpen" 
  | SplatOperator  -> "SplatOperator" 
  | FieldSeparator  -> "FieldSeparator" 
  | FunctionOperator  -> "FunctionOperator" 
  | TypeBind  -> "TypeBind" 
  | SymbolBind  -> "SymbolBind" 
  | TypeParameter  -> "TypeParameter" 
  | TypeDeclaration  -> "TypeDeclaration" 
  | VariableDeclaration  -> "VariableDeclaration" 
  | Whitespace  -> "Whitespace" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EndOfFile  -> (null : System.Object) 
  | EndOfLine  -> (null : System.Object) 
  | BooleanToken  -> (null : System.Object) 
  | StringToken  -> (null : System.Object) 
  | NumberToken  -> (null : System.Object) 
  | Identifier  -> (null : System.Object) 
  | UnitToken  -> (null : System.Object) 
  | InfixOperator  -> (null : System.Object) 
  | SingleQuote  -> (null : System.Object) 
  | DoubleQuote  -> (null : System.Object) 
  | GroupClose  -> (null : System.Object) 
  | GroupOpen  -> (null : System.Object) 
  | MultilineCommentEnd  -> (null : System.Object) 
  | MultilineCommentStart  -> (null : System.Object) 
  | SingleLineComment  -> (null : System.Object) 
  | StructEntryNameValueSeperator  -> (null : System.Object) 
  | StructFieldAccessorOperator  -> (null : System.Object) 
  | StructFieldAliasOperator  -> (null : System.Object) 
  | StructClose  -> (null : System.Object) 
  | StructOpen  -> (null : System.Object) 
  | TupleClose  -> (null : System.Object) 
  | TupleOpen  -> (null : System.Object) 
  | SplatOperator  -> (null : System.Object) 
  | FieldSeparator  -> (null : System.Object) 
  | FunctionOperator  -> (null : System.Object) 
  | TypeBind  -> (null : System.Object) 
  | SymbolBind  -> (null : System.Object) 
  | TypeParameter  -> (null : System.Object) 
  | TypeDeclaration  -> (null : System.Object) 
  | VariableDeclaration  -> (null : System.Object) 
  | Whitespace  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; |]
let _fsyacc_action_rows = 3
let _fsyacc_actionTableElements = [|1us; 32768us; 0us; 2us; 0us; 49152us; 0us; 16385us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; |]
let _fsyacc_reductions ()  =    [| 
# 245 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 254 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                        _1 
                   )
# 43 "Parser.fsy"
                 : string));
|]
# 265 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 34;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : string =
    engine lexer lexbuf 0 :?> _
