let Effect := use "std.Effect"

type Maybe[^A] :=
    | Some of ^A
    | None

let Maybe[^A] extend Effect[Maybe[^A]] :=
    /** @inheritdoc */
    let from :: ^A -> Maybe[^A] := Some

    /** @inheritdoc */
    let then
        :: (^A -> Maybe[^B]) -> Maybe[^A] -> Maybe[^B]
        := fn -> maybe ->
            match maybe
            | Some(value) => fn value
            | _ => None
